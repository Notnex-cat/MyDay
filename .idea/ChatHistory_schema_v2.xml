<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChatHistoryState">
    <option name="serializedSessions">
      <map>
        <entry key="7a298ad4-5706-48c8-b3e4-03308f7c6123" value="{&quot;id&quot;:&quot;7a298ad4-5706-48c8-b3e4-03308f7c6123&quot;,&quot;name&quot;:&quot;DayNote.kt functionality explanation&quot;,&quot;timestamp&quot;:1753630122849,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\n\u003cadditional_data\u003e\nBelow are some potentially helpful/relevant pieces of information for figuring out to respond\n\u003ccurrent_file\u003e\n```kotlin:app/src/main/java/com/notnex/myday/ui/screens/DayNote.kt, lines\u003dALL(1-258)\npackage com.notnex.myday.ui.screens\n\nimport android.util.Log\nimport androidx.compose.animation.AnimatedVisibilityScope\nimport androidx.compose.animation.ExperimentalSharedTransitionApi\nimport androidx.compose.animation.SharedTransitionScope\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.imePadding\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.filled.ArrowBack\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextField\nimport androidx.compose.material3.TextFieldDefaults\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.navigation.NavController\nimport com.notnex.myday.BuildConfig\nimport com.notnex.myday.R\nimport com.notnex.myday.ui.CARD_EXPLODE_BOUNDS_KEY\nimport com.notnex.myday.viewmodel.MyDayViewModel\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\nimport okhttp3.Call\nimport okhttp3.Callback\nimport okhttp3.MediaType.Companion.toMediaTypeOrNull\nimport okhttp3.OkHttpClient\nimport okhttp3.Request\nimport okhttp3.RequestBody.Companion.toRequestBody\nimport okhttp3.Response\nimport org.json.JSONObject\nimport java.io.IOException\nimport java.time.LocalDate\n\n\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalSharedTransitionApi::class)\n@Composable\nfun SharedTransitionScope.DayNote(\n    navController: NavController,\n    viewModel: MyDayViewModel \u003d hiltViewModel(),\n    currentRating: Double,\n    date: LocalDate,\n    note: String,\n    animatedVisibilityScope: AnimatedVisibilityScope,\n){\n    var text by remember { mutableStateOf(note) }\n\n    //val context \u003d LocalContext.current\n\n    val coroutineScope \u003d rememberCoroutineScope()\n\n    var saveJob by remember { mutableStateOf\u003cJob?\u003e(null) }\n\n    val fullDB by viewModel.getScore(date).collectAsState(initial \u003d null)\n\n    var aiResponse by remember { mutableStateOf(\&quot;\&quot;) }\n\n    LaunchedEffect(fullDB?.aiFeedback) {\n        aiResponse \u003d fullDB?.aiFeedback ?: \&quot;\&quot;\n    }\n\n    val apiKey \u003d BuildConfig.NN_API_KEY\n\n    Scaffold(\n        modifier \u003d Modifier\n            .fillMaxSize()\n            .sharedBounds(\n                sharedContentState \u003d rememberSharedContentState(\n                    key \u003d CARD_EXPLODE_BOUNDS_KEY\n                ),\n                animatedVisibilityScope \u003d animatedVisibilityScope\n            ),\n        topBar \u003d {\n            TopAppBar(\n                colors \u003d TopAppBarDefaults.topAppBarColors(\n                    containerColor \u003d Color.Transparent //MaterialTheme.colorScheme.background\n                ),\n                title \u003d { Text(\&quot;Опишите свой день\&quot;) },\n                navigationIcon \u003d {\n                    IconButton(onClick \u003d {navController.popBackStack()}) {\n                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription \u003d \&quot;Back\&quot;)\n                    }\n                }\n            )\n        }\n    ) { innerPadding -\u003e\n\n        Column(\n            modifier \u003d Modifier\n                .padding(innerPadding)\n                .imePadding()\n                //.background(Color.Red)\n                .fillMaxSize(),\n            horizontalAlignment \u003d Alignment.CenterHorizontally,\n            verticalArrangement \u003d Arrangement.Top\n        ) {\n            TextField(\n                value \u003d text,\n                minLines \u003d 5,\n                //maxLines \u003d 5,\n                placeholder \u003d { Text(stringResource(R.string.write_something)) },\n                onValueChange \u003d {\n                    text \u003d it\n                    saveJob?.cancel() // отменяем предыдущую задачу\n                    saveJob \u003d coroutineScope.launch {\n                        delay(1500) // 500 мс после последнего ввода\n                        viewModel.saveDayEntry(date, currentRating, it, aiResponse!!)\n                    }\n                },\n                modifier \u003d Modifier.fillMaxWidth(),\n                textStyle \u003d TextStyle(fontSize \u003d 20.sp),\n                colors \u003d TextFieldDefaults.colors(\n                    focusedContainerColor \u003d Color.Transparent,\n                    unfocusedContainerColor \u003d Color.Transparent,\n                    disabledContainerColor \u003d Color.Transparent,\n                    focusedIndicatorColor \u003d Color.Transparent,  // Отключаем линию при фокусе\n                    unfocusedIndicatorColor \u003d Color.Transparent,\n                )\n            )\n\n            Button(\n                modifier \u003d Modifier\n                    .padding(top \u003d 16.dp),\n                onClick \u003d {\n                    aiResponse \u003d \&quot;\&quot; // обнуляем перед новым ответом\n                    getResponse(\n                        question \u003d text,\n                        apiKey \u003d apiKey, // твой ключ\n                        onStreamUpdate \u003d { chunk -\u003e\n                            aiResponse +\u003d chunk\n                            saveJob?.cancel()\n                            saveJob \u003d coroutineScope.launch {\n                                delay(1000) // 500 мс после последнего ввода\n                                viewModel.saveDayEntry(date, currentRating, text, aiResponse)\n                            }\n                        }\n                    )\n                }\n            ) {\n                Text(text \u003d \&quot;Спросить\&quot;)\n            }\n\n            LazyColumn(\n                modifier \u003d Modifier.fillMaxWidth()\n            ) {\n                item {\n                    Text(\n                        text \u003d aiResponse,\n                        style \u003d MaterialTheme.typography.bodyLarge,\n                        modifier \u003d Modifier\n                            .padding(16.dp)\n                            .fillMaxWidth(),\n                    )\n                }\n            }\n        }\n    }\n}\n\nfun getResponse(question: String, apiKey: String, onStreamUpdate: (String) -\u003e Unit) {\n    val client \u003d OkHttpClient()\n    val url \u003d \&quot;https://api.mistral.ai/v1/chat/completions\&quot;\n    val cleanedQuestion \u003d question.replace(Regex(\&quot;[\\\\u0000-\\\\u001F]\&quot;), \&quot;\&quot;)\n\n    val requestBody \u003d \&quot;\&quot;\&quot;\n        {\n          \&quot;model\&quot;: \&quot;mistral-medium-latest\&quot;,\n          \&quot;completion_args\&quot;: {\n            \&quot;temperature\&quot;: 0.7,\n            \&quot;max_tokens\&quot;: 2048,\n            \&quot;top_p\&quot;: 1\n            },\n          \&quot;stream\&quot;: true,\n          \&quot;messages\&quot;: [\n            {\&quot;role\&quot;: \&quot;user\&quot;, \n            \&quot;content\&quot;: \&quot;Ты — ассистент по саморазвитию. Проанализируй день по комментарию: \&quot;$cleanedQuestion\&quot;.\n            Кратко:\n            1. Что было хорошо или плохо.\n            2. Что улучшить.\n            3. Без лишней мотивации. Только суть.\&quot;\n            }\n          ]\n        }\n    \&quot;\&quot;\&quot;.trimIndent()\n\n    val request \u003d Request.Builder()\n        .url(url)\n        .addHeader(\&quot;Content-Type\&quot;, \&quot;application/json\&quot;)\n        .addHeader(\&quot;Authorization\&quot;, \&quot;Bearer $apiKey\&quot;)\n        .post(requestBody.toRequestBody(\&quot;application/json\&quot;.toMediaTypeOrNull()))\n        .build()\n\n    client.newCall(request).enqueue(object : Callback {\n        override fun onFailure(call: Call, e: IOException) {\n            Log.e(\&quot;GroqError\&quot;, \&quot;Request failed\&quot;, e)\n            onStreamUpdate(\&quot;Ошибка: ${e.message}\&quot;)\n        }\n\n        override fun onResponse(call: Call, response: Response) {\n            val source \u003d response.body.source()\n            val buffer \u003d okio.Buffer()\n\n            try {\n                while (!source.exhausted()) {\n                    source.read(buffer, 8192)\n                    val raw \u003d buffer.readUtf8()\n                    raw.split(\&quot;\\n\&quot;).forEach { line -\u003e\n                        if (line.startsWith(\&quot;data:\&quot;)) {\n                            val jsonPart \u003d line.removePrefix(\&quot;data:\&quot;).trim()\n                            if (jsonPart.isNotEmpty() \u0026\u0026 jsonPart !\u003d \&quot;[DONE]\&quot;) {\n                                try {\n                                    val obj \u003d JSONObject(jsonPart)\n                                    val delta \u003d obj.getJSONArray(\&quot;choices\&quot;)\n                                        .getJSONObject(0)\n                                        .getJSONObject(\&quot;delta\&quot;)\n                                    if (delta.has(\&quot;content\&quot;)) {\n                                        val chunk \u003d delta.getString(\&quot;content\&quot;)\n                                        onStreamUpdate(chunk)\n                                    }\n                                } catch (_: Exception) {}\n                            }\n                        }\n                    }\n                }\n            } catch (e: Exception) {\n                Log.e(\&quot;GroqStreamError\&quot;, \&quot;Stream parsing failed\&quot;, e)\n                onStreamUpdate(\&quot;Ошибка потока: ${e.message}\&quot;)\n            }\n        }\n    })\n}\n```\n\u003c/current_file\u003e\n\u003c/additional_data\u003e\n\u003cuser_query\u003e\nthis is my first question to you, so answer in 3 sentences. what does this file do?\n\u003c/user_query\u003e&quot;}]},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;This file implements a Jetpack Compose UI screen for adding/editing a daily note in an Android app, where users can write about their day and receive AI-generated feedback on their entry using the Mistral AI API. It manages UI state, saves notes to a ViewModel with debounce, and streams AI analysis results live via OkHttp. The screen features a text field, a button to trigger the AI, and displays the feedback in a scrollable column.&quot;}]}]}" />
      </map>
    </option>
  </component>
</project>